import os
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
from datetime import datetime
import numpy as np

def analyze_offset_errors(original, extracted, start_pos=2000):
    """–ê–Ω–∞–ª–∏–∑ —Å–º–µ—â–µ–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –æ—à–∏–±–æ–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    if len(original) <= start_pos or len(extracted) <= start_pos:
        print("‚ùå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –í—ã–¥–µ–ª—è–µ–º —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    orig_tail = original[start_pos:]
    extr_tail = extracted[start_pos:]
    min_len = min(len(orig_tail), len(extr_tail))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è
    max_offset_test = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    offset_results = []
    
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –±–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ–∑–∏—Ü–∏–∏ {start_pos}:")
    
    for offset in range(-max_offset_test, max_offset_test + 1):
        if offset < 0:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª[—Å–¥–≤–∏–≥:] —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º[:—Å–¥–≤–∏–≥]
            compare_len = min_len + offset
            orig_part = orig_tail[-offset:]
            extr_part = extr_tail[:compare_len]
        else:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª[:—Å–¥–≤–∏–≥] —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º[—Å–¥–≤–∏–≥:]
            compare_len = min_len - offset
            orig_part = orig_tail[:compare_len]
            extr_part = extr_tail[offset:]
        
        errors = sum(1 for o, e in zip(orig_part, extr_part) if o != e)
        error_percent = (errors / compare_len) * 100 if compare_len > 0 else 100
        offset_results.append((offset, error_percent, compare_len))
        
        print(f"–°–º–µ—â–µ–Ω–∏–µ {offset:3d}: {error_percent:.2f}% –æ—à–∏–±–æ–∫ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {compare_len} –±–∏—Ç)")
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
    best_offset = min(offset_results, key=lambda x: x[1])[0]
    print(f"\n‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: {best_offset} –±–∏—Ç")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    offsets = [x[0] for x in offset_results]
    error_rates = [x[1] for x in offset_results]
    
    plt.figure(figsize=(10, 5))
    plt.plot(offsets, error_rates, 'bo-')
    plt.axvline(x=0, color='r', linestyle='--', label='–ë–µ–∑ —Å–º–µ—â–µ–Ω–∏—è')
    plt.axvline(x=best_offset, color='g', linestyle='-', label='–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ')
    plt.xlabel('–í–µ–ª–∏—á–∏–Ω–∞ —Å–º–µ—â–µ–Ω–∏—è (–±–∏—Ç)')
    plt.ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ (%)')
    plt.title(f'–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—à–∏–±–æ–∫ –æ—Ç —Å–º–µ—â–µ–Ω–∏—è (–ø–æ—Å–ª–µ {start_pos} –±–∏—Ç)')
    plt.legend()
    plt.grid(True)
    plt.savefig('offset_analysis.png')
    print("\nüìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫ –æ—Ç —Å–º–µ—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ offset_analysis.png")
    
    return best_offset

def analyze_error_clusters(positions, window_size=100):
    """–ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫"""
    if not positions:
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—à–∏–±–æ–∫ –≤ numpy array
    pos_array = np.array(positions)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –æ—à–∏–±–∫–∞–º–∏
    intervals = np.diff(pos_array)
    
    print("\nüîé –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫:")
    print(f"–°—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—à–∏–±–∫–∞–º–∏: {np.mean(intervals):.1f} –±–∏—Ç")
    print(f"–ú–µ–¥–∏–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {np.median(intervals):.1f} –±–∏—Ç")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
    cluster_threshold = window_size // 2
    clusters = []
    current_cluster = []
    
    for pos in positions:
        if not current_cluster or pos - current_cluster[-1] <= cluster_threshold:
            current_cluster.append(pos)
        else:
            clusters.append(current_cluster)
            current_cluster = [pos]
    
    if current_cluster:
        clusters.append(current_cluster)
    
    print(f"\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(clusters)} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –æ—à–∏–±–æ–∫:")
    for i, cluster in enumerate(clusters[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        print(f"–ö–ª–∞—Å—Ç–µ—Ä {i+1}: {len(cluster)} –æ—à–∏–±–æ–∫ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏ {cluster[0]}-{cluster[-1]}")
    
    if len(clusters) > 5:
        print(f"... –∏ –µ—â–µ {len(clusters)-5} –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")

def read_bits_from_file(filepath):
    """–ß—Ç–µ–Ω–∏–µ –±–∏—Ç–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        with open(filepath, 'r') as file:
            content = file.read().strip()
            if not all(c in '01' for c in content):
                print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ñ–∞–π–ª {filepath} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –±–∏—Ç—ã (0/1)!")
            return content
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {str(e)}")
        exit(1)

def compare_bit_sequences(original, extracted):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –¥–ª–∏–Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –±–∏—Ç–æ–≤"""
    extracted_len = len(extracted)
    if len(original) < extracted_len:
        print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—á–µ ({len(original)}) —á–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è ({extracted_len})")
        extracted = extracted[:len(original)]
        extracted_len = len(original)
    
    original_truncated = original[:extracted_len]
    errors = []
    
    for idx in range(extracted_len):
        if original_truncated[idx] != extracted[idx]:
            errors.append((idx, original_truncated[idx], extracted[idx]))
    
    return errors, extracted_len

def generate_report(errors, total_bits, output_dir):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    error_count = len(errors)
    error_percent = (error_count / total_bits) * 100 if total_bits > 0 else 0
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs(output_dir, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_filename = os.path.join(output_dir, f"bit_comparison_report_{timestamp}.txt")
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    with open(report_filename, 'w') as report_file:
        report_file.write("–û—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–∏—Ç–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π\n")
        report_file.write("="*50 + "\n")
        report_file.write(f"–°—Ä–∞–≤–Ω–µ–Ω–æ –±–∏—Ç: {total_bits}\n")
        report_file.write(f"–û—à–∏–±–æ—á–Ω—ã—Ö –±–∏—Ç: {error_count}\n")
        report_file.write(f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {error_percent:.6f}%\n\n")
        
        report_file.write("–ü–µ—Ä–≤—ã–µ 100 –æ—à–∏–±–æ–∫:\n")
        for idx, (pos, orig, extr) in enumerate(errors[:100]):
            report_file.write(f"{pos:8d} | –±—ã–ª–æ: {orig} ‚Üí —Å—Ç–∞–ª–æ: {extr}\n")
            if idx == 99 and len(errors) > 100:
                report_file.write(f"\n... –∏ –µ—â–µ {len(errors)-100} –æ—à–∏–±–æ–∫\n")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    if error_count > 0:
        plot_filename = os.path.join(output_dir, f"error_distribution_{timestamp}.png")
        plot_error_distribution([e[0] for e in errors], total_bits, plot_filename)
    
    return report_filename, error_percent

def plot_error_distribution(error_positions, total_bits, filename):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""
    plt.figure(figsize=(12, 6))
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    plt.subplot(1, 2, 1)
    bins = min(50, total_bits//100 or 1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    plt.hist(error_positions, bins=bins, color='red', alpha=0.7)
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º')
    plt.xlabel('–ü–æ–∑–∏—Ü–∏—è –±–∏—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫')
    
    # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—à–∏–±–æ–∫
    plt.subplot(1, 2, 2)
    plt.plot(sorted(error_positions), range(1, len(error_positions)+1), 'b-')
    plt.title('–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫')
    plt.xlabel('–ü–æ–∑–∏—Ü–∏—è –±–∏—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫')
    plt.grid(True)
    
    plt.tight_layout()
    plt.savefig(filename)
    plt.close()
    print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")

def plot_offset_analysis(original, extracted, start_pos=2000, max_offset=10):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–º–µ—â–µ–Ω–∏—è —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    orig_tail = original[start_pos:]
    extr_tail = extracted[start_pos:]
    min_len = min(len(orig_tail), len(extr_tail))
    
    # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏–π
    offsets = range(-max_offset, max_offset + 1)
    error_rates = []
    
    for offset in offsets:
        if offset < 0:
            compare_len = min_len + offset
            orig_part = orig_tail[-offset:]
            extr_part = extr_tail[:compare_len]
        else:
            compare_len = min_len - offset
            orig_part = orig_tail[:compare_len]
            extr_part = extr_tail[offset:]
        
        errors = sum(1 for o, e in zip(orig_part, extr_part) if o != e)
        error_rates.append((errors / compare_len) * 100 if compare_len > 0 else 100)
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
    best_idx = np.argmin(error_rates)
    best_offset = offsets[best_idx]
    best_rate = error_rates[best_idx]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(12, 6))
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
    ax = plt.subplot(1, 2, 1)
    bars = plt.bar(offsets, error_rates, color='skyblue')
    bars[best_idx].set_color('limegreen')
    
    # –í—ã–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
    plt.axvline(x=best_offset, color='red', linestyle='--', alpha=0.7)
    plt.text(best_offset, best_rate + 2, f'–û–ø—Ç–∏–º—É–º: {best_offset}\n{best_rate:.2f}%', 
             ha='center', va='bottom', color='red')
    
    plt.title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—à–∏–±–æ–∫ –æ—Ç —Å–º–µ—â–µ–Ω–∏—è')
    plt.xlabel('–°–º–µ—â–µ–Ω–∏–µ (–±–∏—Ç)')
    plt.ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ (%)')
    plt.grid(True, linestyle='--', alpha=0.6)
    ax.xaxis.set_major_locator(MaxNLocator(integer=True))
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    ax2 = plt.subplot(1, 2, 2)
    sample_len = min(100, min_len - abs(best_offset))
    
    if best_offset < 0:
        orig_sample = orig_tail[-best_offset:-best_offset+sample_len]
        extr_sample = extr_tail[:sample_len]
    else:
        orig_sample = orig_tail[:sample_len]
        extr_sample = extr_tail[best_offset:best_offset+sample_len]
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ç–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    for i in range(sample_len):
        color = 'red' if orig_sample[i] != extr_sample[i] else 'green'
        plt.plot([i, i], [0, 1], color=color, linewidth=2)
    
    plt.title(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ—â–µ–Ω–∏–∏ {best_offset}\n(–∫—Ä–∞—Å–Ω—ã–π = –æ—à–∏–±–∫–∞)')
    plt.xlabel('–ü–æ–∑–∏—Ü–∏—è –±–∏—Ç–∞')
    plt.yticks([])
    plt.xlim(0, sample_len)
    
    plt.tight_layout()
    plt.savefig('best_offset_analysis.png', dpi=120)
    plt.close()
    
    print(f"\n‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: {best_offset} –±–∏—Ç (–æ—à–∏–±–æ–∫: {best_rate:.2f}%)")
    print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'best_offset_analysis.png'")
    
    return best_offset

def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    BASE_DIR = "./algorithmBMYeYu"
    REPORT_DIR = "./algorithmBMYeYu/reports"
    INPUT_FILE = os.path.join(BASE_DIR, "input_message_bit.txt")
    OUTPUT_FILE = os.path.join(BASE_DIR, "output_message_bit.txt")
    
    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print("\nüîé –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏—Ç–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...")
    original_bits = read_bits_from_file(INPUT_FILE)
    extracted_bits = read_bits_from_file(OUTPUT_FILE)
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n‚ÑπÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {len(original_bits)} –±–∏—Ç")
    print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞: {len(extracted_bits)} –±–∏—Ç")
    print(f"\n–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è (–ø–µ—Ä–≤—ã–µ 50): {original_bits[:50]}...")
    print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è (–ø–µ—Ä–≤—ã–µ 50): {extracted_bits[:50]}...")
    
    # –ê–Ω–∞–ª–∏–∑ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –¥–ª–∏–Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –±–∏—Ç–æ–≤)
    errors, compared_bits = compare_bit_sequences(original_bits, extracted_bits)
    report_file, error_rate = generate_report(errors, compared_bits, REPORT_DIR)
    
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–æ –±–∏—Ç: {compared_bits}")
    print(f"‚Ä¢ –û—à–∏–±–æ–∫: {len(errors)}")
    print(f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {error_rate:.6f}%")
    print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    if len(errors) == 0:
        print("\nüéâ –û—Ç–ª–∏—á–Ω–æ! –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
    elif error_rate < 0.001:
        print("\n‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫")
    elif error_rate < 1:
        print("\n‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑")
    else:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–µ—Ä–≤—ã—Ö 1999 –±–∏—Ç–∞—Ö
    errors, _ = compare_bit_sequences(original_bits[:1999], extracted_bits[:1999])
    print(f"–û—à–∏–±–æ–∫ –≤ –ø–µ—Ä–≤—ã—Ö 1999 –±–∏—Ç–∞—Ö: {len(errors)}")

    # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö 2000 –±–∏—Ç
    errors_first_2000, _ = compare_bit_sequences(original_bits[:2000], extracted_bits[:2000])
    print(f"\n–ü–µ—Ä–≤—ã–µ 2000 –±–∏—Ç: {len(errors_first_2000)} –æ—à–∏–±–æ–∫ ({len(errors_first_2000)/20:.1f}%)")

    # –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ —Å –ø–æ–∏—Å–∫–æ–º —Å–º–µ—â–µ–Ω–∏—è
    best_offset = analyze_offset_errors(original_bits, extracted_bits)

    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ –≤ "—Ö–≤–æ—Å—Ç–µ"
    if len(original_bits) > 2000 and len(extracted_bits) > 2000:
        tail_errors, compared_bits = compare_bit_sequences(
            original_bits[2000:], 
            extracted_bits[2000 + best_offset:] if best_offset > 0 else extracted_bits[2000:]
        )
        error_positions = [e[0] for e in tail_errors]
        analyze_error_clusters([p + 2000 for p in error_positions])

    best_offset = plot_offset_analysis(original_bits, extracted_bits)

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è
    if best_offset != 0:
        corrected_bits = extracted_bits[best_offset:] if best_offset > 0 else extracted_bits[:best_offset]
        print(f"\n–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Å–º–µ—â–µ–Ω–∏–µ {best_offset}, –¥–ª–∏–Ω–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(corrected_bits)}")
if __name__ == "__main__":
    main()